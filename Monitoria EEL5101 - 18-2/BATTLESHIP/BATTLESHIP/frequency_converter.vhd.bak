library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity frequency_converter is 
port	(
		clk, enable, clear: in std_logic;
		hz1, hz2, hz3, hz4: out std_logic
		);
end entity;

architecture bhv of frequency_converter is
	signal cnt1: std_logic_vector(27 downto 0);
	signal cnt2, cnt3, cnt4: std_logic_vector(2 downto 0);
	signal tc: std_logic;
begin

	--1 hz
	COUNT1: process(clk)	
	begin		
		if (clear = '1') then
			cnt1 <= x"0000000";
		elsif clk'event and clk='1' then
			if (enable = '1') then
			--chegou no valor de 1 segundo 2FAF07F
				if(cnt1 = x"2FAF07F") then
					cnt1 <= x"0000000";
				else
					cnt1 <= cnt1 + 1;
				end if;
			end if;
		end if;
	end process;

	--chega no valor de 1 segundo
	tc <= '1' when cnt1 = x"2FAF07F" else '0';
	hz1 <= tc;
	
	--2 hz
	COUNT2: process(tc)	
	begin		
		if (clear = '1') then
			cnt2 <= "000";
		elsif tc'event and tc='1' then
			if (enable = '1') then
				if(cnt2 = "010") then
					cnt2 <= "000";
				else
					cnt2 <= cnt2 + 1;
				end if;
			end if;
		end if;
	end process;
	hz2 <= '1' when cnt2="010" else '0';
	
	--3 hz
	COUNT3: process(tc)	
	begin		
		if (clear = '1') then
			cnt3 <= "000";
		elsif tc'event and tc='1' then
			if (enable = '1') then
				if(cnt3 = "011") then
					cnt3 <= "000";
				else
					cnt3 <= cnt3 + 1;
				end if;
			end if;
		end if;
	end process;
	hz3 <= '1' when cnt3="011" else '0';
	
	--4 hz
	COUNT4: process(tc) is
	begin		
		if (clear = '1') then
			cnt4 <= "000";
		elsif rising_edge(tc) then
			if (enable = '1') then
				if(cnt4 = "100") then
					cnt4 <= "000";
				else
					cnt4 <= cnt4 + 1;
				end if;
			end if;
		end if;
	end process;
	hz4 <= '1' when cnt4="100" else '0';
	
end architecture;